/*
 * Copyright 2022 Sergey Lyashko
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 /* Grammar */
{
  parserClass="com.gllllepulla.plugin.parser.AsnParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Asn"
  psiImplClassSuffix="Impl"
  psiPackage="com.gllllepulla.plugin.psi"
  psiImplPackage="com.gllllepulla.plugin.psi.impl"

  elementTypeHolderClass="com.gllllepulla.plugin.psi.AsnTypes"
  elementTypeClass="com.gllllepulla.plugin.psi.AsnElementType"
  tokenTypeClass="com.gllllepulla.plugin.psi.token.AsnTokenType"

  tokens = [
        /* Global type */
        UNIVERSAL = "UNIVERSAL"
        APPLICATION = "APPLICATION"
        PRIVATE = "PRIVATE"
        CONTENT_SPECIFIC = "CONTENT-SPECIFIC"
        /* Construct definition */
        SET = "SET"
        EXTERNAL = "EXTERNAL"
        INSTANCE = "INSTANCE"
        SEQUENCE = "SEQUENCE"
        OF = "OF"
        BEGIN = "BEGIN"
        END = "END"
        DEFINITIONS = "DEFINITIONS"
        FROM = "FROM"
        CLASS_DEF = "CLASS"
        CHOICE = "CHOICE"
        IMPLICIT = "IMPLICIT"
        EXPLICIT = "EXPLICIT"
        SIZE = "SIZE"
        MAX = "MAX"
        MIN = "MIN"
        ENUMERATED = "ENUMERATED"
        WITH = "WITH"
        SYNTAX = "SYNTAX"
        /* universal type */
        ANY = "ANY"
        INTEGER = "INTEGER"
        NULL = "NULL"
        BOOLEAN = "BOOLEAN"
        OID = "OID"
        REAL = "REAL"
        OPTIONAL = "OPTIONAL"
        DEFAULT = "DEFAULT"
        UNIQUE = "UNIQUE"
        /* Bit string */
        OCTET = "OCTET STRING"
        BIT = "BIT STRING"
        /* Type string */
        STRING_NUM = "NumericString"
        STRING_PR = "PrintableString"
        STRING_TELE = "TeletextString"
        STRING_VTEXT = "VideotexString"
        STRING_VIS = "VisibleString"
        STRING_IA5 = "IA5String"
        STRING_GRAPH = "GraphicString"
        STRING_BMP = "BMPString"
        STRING_GEN = "GeneralString"
        STRING_UNI = "UniversalString"
        STRING_UTF8 = "UTF8String"
        STRING_CHAR = "CHARACTER STRING"
        /* other keywords */
        TAGS = "TAGS"
        EXPORTS = "EXPORTS"
        IMPORTS = "IMPORTS"
        CONTAINING = "CONTAINING"
        TYPE_IDENTIFIER = "TYPE-IDENTIFIER"
        /* brackets */
        LPAREN = "("
        RPAREN = ")"
        LBRACE = "{"
        RBRACE = "}"
        LBRACKET = "["
        RBRACKET = "]"
        /* Operators */
        ASSIGMENT = "::="
        VAR = "&"
        /* Symbols */
        COMMA = ","
        SEMICOLON = ";"
        COLON = ":"
        DOT = "."
        DOUBLE_DOT = ".."
        OR = "|"
        DOUBLE_QUOTE = "\""
        MINUS = "-"
        AT = "@"
        /* comments */
        COMMENT_LINE = "regexp:---.*"
        COMMENT_HEADER = "regexp:--.*"
        COMMENT_MULTILINE = "regexp:/\*[\s\S]*?\*/"
        /* Date and Time */
        TIME_UTC = "UTCTime"
        TIME_GEN = "GeneralizedTime"
        TIME = "TIME"
        TIME_OF_DAY = "TIME-OF-DAY"
        DATE = "DATE"
        DATE_TIME = "DATE-TIME"
        DURATION = "DURATION"
        /* Identifiers */
        USER_TYPE = "regexp:[A-Z]([-A-Z0-9]*[a-z]+[-A-Za-z0-9]*)+"
        VALUE_NAME = "regexp:\p{Ll}(-|\d|\p{Ll}|\p{Lu})*"
        TYPE_CLASS = "regexp:\p{Lu}(-|\p{Lu})*"
        /* Primitive */
        STR_LITERALS = "regexp:\"[^\"]*\""
        NUMBER_INT = "regexp:-?[0-9]+"
        NUMBER_FLOAT = "regexp:-?\d/.(\d)* "
        TRUE = "TRUE"
        FALSE = "FALSE"
        /* white space */
        NEW_LINE = "regexp:(\r|\n|\r\n)"
        WHITE_SPACE = "regexp:[\s\t\f\x0B]"
  ]

  generateTokenAccessors=true
}
program                  ::= property
property                 ::= NEW_LINE* file_header
file_header              ::= (USER_TYPE|TYPE_CLASS) DEFINITIONS (IMPLICIT TAGS)? ASSIGMENT BEGIN exports_ imports_? expr_* END { pin=4 }
/* elements */
values_                  ::= USER_TYPE|VALUE_NAME
values_or                ::= VALUE_NAME {OR VALUE_NAME}*
int_square               ::= LBRACKET NUMBER_INT RBRACKET { pin=1 }
range_                   ::= INTEGER? LPAREN NUMBER_INT int_range_expr? RPAREN
int_range_expr           ::= DOUBLE_DOT NUMBER_INT { pin=1 }
size_range               ::= LPAREN SIZE range_ RPAREN { pin=1 }
bool_                    ::= BOOLEAN DEFAULT? (TRUE|FALSE)?
time_                    ::= TIME_UTC|TIME_GEN|TIME|TIME_OF_DAY|DATE|DATE_TIME|DURATION
element_                 ::= (USER_TYPE|type_string_size|time_|range_|primitive_def|octet_string|bool_) OPTIONAL?
type_string_size         ::= (STRING_NUM|STRING_PR|STRING_TELE|STRING_VTEXT|STRING_VIS|STRING_IA5|STRING_GRAPH|STRING_BMP|STRING_GEN|STRING_UNI|STRING_UTF8|STRING_CHAR) size_range?
octet_string             ::= (OCTET|BIT) size_range
primitive_def            ::= INTEGER|REAL|NULL
types_                   ::= TYPE_CLASS|USER_TYPE|OID
seq_of                   ::= SEQUENCE OF
var_                     ::= VAR values_ USER_TYPE? UNIQUE?
variables_               ::= var_ {COMMA var_}*
enum_element             ::= VALUE_NAME LPAREN NUMBER_INT RPAREN { pin=2 }
seq_of_value             ::= values_ seq_of USER_TYPE OPTIONAL?
/* export & import */
exports_                 ::= EXPORTS (types_|values_) {COMMA values_}* SEMICOLON { pin=1 }
imports_                 ::= IMPORTS from_* SEMICOLON { pin=1 }
from_                    ::= (TYPE_CLASS|values_) {COMMA (TYPE_CLASS|values_)}* FROM USER_TYPE
/* expressions */
expr_                    ::= (primitive_expr|without_body_expr|body_choice_expr|body_enum_expr|body_sequence_expr|body_tagged_expr)
primitive_expr           ::= values_? (types_)? ASSIGMENT (STR_LITERALS|NUMBER_INT|NUMBER_FLOAT) body_with_syntax_expr?
without_body_expr        ::= values_? (types_)? ASSIGMENT CLASS_DEF? seq_of? element_
body_choice_expr         ::= values_? (types_)? ASSIGMENT CLASS_DEF? CHOICE LBRACE choice_construct? {COMMA choice_construct}* RBRACE body_with_syntax_expr? { pin=6 }
body_enum_expr           ::= values_? (types_)? ASSIGMENT CLASS_DEF? ENUMERATED LBRACE enum_element? {COMMA enum_element}* RBRACE OPTIONAL? body_with_syntax_expr? { pin=6 }
body_sequence_expr       ::= values_? (types_)? ASSIGMENT CLASS_DEF? SEQUENCE LBRACE sequence_construct? {COMMA sequence_construct}* RBRACE body_with_syntax_expr? { pin=6 }
body_tagged_expr         ::= values_? (types_)? ASSIGMENT CLASS_DEF? LBRACE (values_or|variables_|oid_|data_|seq_of_value|inner_expr)* RBRACE body_with_syntax_expr? { pin=5 }
body_with_syntax_expr    ::= WITH SYNTAX LBRACE {types_ VAR (VALUE_NAME|USER_TYPE)}* RBRACE { pin=3 }
/* inner expressions */
inner_expr               ::= (inner_choice_expr|inner_enum_expr)
inner_choice_expr        ::= (VALUE_NAME int_square?|USER_TYPE|TYPE_CLASS) CHOICE LBRACE choice_construct? {COMMA choice_construct}* RBRACE { pin=3 }
inner_enum_expr          ::= (VALUE_NAME int_square?|USER_TYPE|TYPE_CLASS) ENUMERATED LBRACE enum_element? {COMMA enum_element}* RBRACE OPTIONAL? { pin=3 }
/* construct */
oid_                     ::= OID (body_singleton|VALUE_NAME)
data_                    ::= TYPE_CLASS seq_of? (USER_TYPE|body_choice)
body_choice              ::= CHOICE LBRACE choice_construct? {COMMA choice_construct}* RBRACE { pin=2 }
sequence_construct       ::= seq_of_value|choice_construct|inner_expr|id_tagged_construct
choice_construct         ::= VALUE_NAME int_square? (seq_of|IMPLICIT|EXPLICIT)? (element_|body_enum)
id_tagged_construct      ::= VALUE_NAME TYPE_CLASS DOT VAR values_ LPAREN body_singleton* RPAREN { pin=6 }
body_singleton           ::= LBRACE AT? (types_|VALUE_NAME) RBRACE { pin=1 }
body_enum                ::= ENUMERATED LBRACE enum_element? {COMMA enum_element}* RBRACE OPTIONAL? { pin=2 }
