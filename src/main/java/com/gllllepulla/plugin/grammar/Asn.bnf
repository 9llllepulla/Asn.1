/*
 * Copyright 2022 Sergey Lyashko
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 /* Grammar */
{
  parserClass="com.gllllepulla.plugin.parser.AsnParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Asn"
  psiImplClassSuffix="Impl"
  psiPackage="com.gllllepulla.plugin.psi"
  psiImplPackage="com.gllllepulla.plugin.psi.impl"

  elementTypeHolderClass="com.gllllepulla.plugin.psi.AsnTypes"
  elementTypeClass="com.gllllepulla.plugin.psi.AsnElementType"
  tokenTypeClass="com.gllllepulla.plugin.psi.AsnTokenType"

  tokens = [
        /* Global type */
        UNIVERSAL = "UNIVERSAL"
        APPLICATION = "APPLICATION"
        PRIVATE = "PRIVATE"
        CONTENT_SPECIFIC = "CONTENT-SPECIFIC"
        /* Construct definition */
        SET = "SET"
        EXTERNAL = "EXTERNAL"
        INSTANCE = "INSTANCE"
        SEQUENCE = "SEQUENCE"
        OF = "OF"
        BEGIN = "BEGIN"
        END = "END"
        DEFINITIONS = "DEFINITIONS"
        FROM = "FROM"
        CLASS = "CLASS"
        TAGGED = "TAGGED"
        ANY = "ANY"
        CHOICE = "CHOICE"
        IMPLICIT = "IMPLICIT"
        EXPLICIT = "EXPLICIT"
        SIZE = "SIZE"
        MAX = "MAX"
        MIN = "MIN"
        ENUMERATED = "ENUMERATED"
        WITH = "WITH"
        SYNTAX = "SYNTAX"
        /* universal type */
        INTEGER = "INTEGER"
        NULL = "NULL"
        BOOLEAN = "BOOLEAN"
        OID = "OID"
        RELATIVE_OID = "RELATIVE-OID"
        OID_IRI = "OID-IRI"
        RELATIVE_OID_IRI = "RELATIVE-OID-IRI"
        REAL = "REAL"
        OPTIONAL = "OPTIONAL"
        DEFAULT = "DEFAULT"
        UNIQUE = "UNIQUE"
        EOC = "EOC"
        /* Bit string */
        OCTET = "OCTET STRING"
        BIT = "BIT STRING"
        /* Type string */
        STRING_NUM = "NumericString"
        STRING_PR = "PrintableString"
        STRING_TELE = "TeletextString"
        STRING_VTEXT = "VideotexString"
        STRING_VIS = "VisibleString"
        STRING_IA5 = "IA5String"
        STRING_GRAPH = "GraphicString"
        STRING_BMP = "BMPString"
        STRING_GEN = "GeneralString"
        STRING_UNI = "UniversalString"
        STRING_UTF8 = "UTF8String"
        STRING_CHAR = "CHARACTER STRING"
        /* other keywords */
        TAGS = "TAGS"
        EXPORTS = "EXPORTS"
        IMPORTS = "IMPORTS"
        CONTAINING = "CONTAINING"
        TYPE_IDENTIFIER = "TYPE-IDENTIFIER"
        /* brackets */
        LPAREN = "("
        RPAREN = ")"
        LBRACE = "{"
        RBRACE = "}"
        LBRACKET = "["
        RBRACKET = "]"
        /* Operators */
        ASSIGMENT = "::="
        VAR = "&"
        /* Symbols */
        COMMA = ","
        SEMICOLON = ";"
        COLON = ":"
        DOT = "."
        DOUBLE_DOT = ".."
        OR = "|"
        DOUBLE_QUOTE = "\""
        MINUS = "-"
        AT = "@"
        /* comments */
        COMMENT_LINE = "regexp:---.*"
        COMMENT_HEADER = "regexp:--.*"
        COMMENT_MULTILINE = "regexp:/\*[\s\S]*?\*/"
        /* Date and Time */
        TIME_UTC = "UTCTime"
        TIME_GEN = "GeneralizedTime"
        TIME = "TIME"
        TIME_OF_DAY = "TIME-OF-DAY"
        DATE = "DATE"
        DATE_TIME = "DATE-TIME"
        DURATION = "DURATION"
        /* Identifiers */
        VALUE_REF = "regexp:[A-Z]([A-Za-z])*"
        VALUE_NAME = "regexp:\p{Ll}(-|\d|\p{Ll}|\p{Lu})*"
        VALUE_CLASS = "regexp:\p{Lu}(\p{Lu})*"
        /* Primitive */
        STR_LITERALS = "regexp:\"[^\"]*\""
        NUMBER_INT = "regexp:[0-9]+"
        NUMBER_FLOAT = "regexp:\d/.(\d)* "
        /* white space */
        NEW_LINE = "regexp:(\r|\n|\r\n)"
        WHITE_SPACE = "regexp:[\s\t\f]"
        EMPTY_ELEMENT = "regexp:\x05"
  ]

  generateTokenAccessors=true
}
asnFile ::= all
all ::= element *
private element ::= !<<eof>> { recoverWhile=element_recover }
private element_recover ::= !(
/* universal type */
INTEGER | NULL | BOOLEAN | OID | RELATIVE_OID | OID_IRI | RELATIVE_OID_IRI | REAL | OPTIONAL | DEFAULT | UNIQUE | EOC |
/* Bit string */
OCTET | BIT |
/* Type string */
STRING_NUM | STRING_PR | STRING_TELE | STRING_VTEXT | STRING_VIS | STRING_IA5 | STRING_GRAPH | STRING_BMP | STRING_GEN |
STRING_UNI | STRING_UTF8 | STRING_CHAR |
/* brackets */
LPAREN | RPAREN | LBRACE | RBRACE | LBRACKET | RBRACKET |
/* Operators */
ASSIGMENT | VAR |
/* Symbols */
COMMA | SEMICOLON | COLON | DOT | DOUBLE_DOT | OR | DOUBLE_QUOTE | MINUS | AT |
/* comments */
COMMENT_LINE | COMMENT_HEADER | COMMENT_MULTILINE |
/* Date and Time */
TIME_UTC | TIME_GEN | TIME | TIME_OF_DAY | DATE | DATE_TIME | DURATION |
/* Primitives */
STR_LITERALS | NUMBER_INT | NUMBER_FLOAT |
/* white space */
NEW_LINE | WHITE_SPACE | NULL_ELEMENT |
/* Global type */
UNIVERSAL | APPLICATION | PRIVATE | CONTENT_SPECIFIC |
/* Construct definition */
SET | EXTERNAL | INSTANCE | SEQUENCE | OF | BEGIN | END | DEFINITIONS | FROM | CLASS | TAGGED | ANY | CHOICE |
IMPLICIT | EXPLICIT | SIZE | MAX | MIN | ENUMERATED | WITH | SYNTAX |
/* other keywords */
TAGS | EXPORTS | IMPORTS | CONTAINING | TYPE_IDENTIFIER
/* Identifiers */
VALUE_CLASS | VALUE_REF | VALUE_NAME |
)



