/*
 * Copyright 2022 Sergey Lyashko
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 /* Grammar */
{
  parserClass="com.gllllepulla.plugin.parser.AsnParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Asn"
  psiImplClassSuffix="Impl"
  psiPackage="com.gllllepulla.plugin.psi"
  psiImplPackage="com.gllllepulla.plugin.psi.impl"

  elementTypeHolderClass="com.gllllepulla.plugin.psi.AsnTypes"
  elementTypeClass="com.gllllepulla.plugin.psi.AsnElementType"
  tokenTypeClass="com.gllllepulla.plugin.psi.AsnTokenType"

  tokens = [
        /* keywords */
        BEGIN = "BEGIN"
        IMPLICIT = "IMPLICIT"
        TAGGED = "TAGGED"
        TAGS = "TAGS"
        CLASS = "CLASS"
        EXPORTS = "EXPORTS"
        IMPORTS = "IMPORTS"
        ENUMERATED = "ENUMERATED"
        SEQUENCE = "SEQUENCE"
        SEQUENCE_OF = "SEQUENCE OF"
        CHOICE = "CHOICE"
        UNIQUE = "UNIQUE"
        DEFINITIONS = "DEFINITIONS"
        OID = "OID"
        DATA = "DATA"
        SIZE = "SIZE"
        FROM = "FROM"
        WITH_SYNTAX = "WITH SYNTAX"
        END = "END"

        /* brackets */
        LPAREN = "("
        RPAREN = ")"
        LBRACE = "{"
        RBRACE = "}"
        LBRACKET = "["
        RBRACKET = "]"

        /* Operators */
        LET = "::="
        COMMA = ","
        SEMICOLON = ";"
        COLON = ":"
        DOT = "."

        /* comments */
        COMMENT_LINE = "regexp:---.*"

        /* type keywords */
        UTC_TIME = "UTCTime"
        UTF8STRING = "UTF8String"
        INTEGER = "INTEGER"
        NULL = "NULL"
        OPTIONAL = "OPTIONAL"
        BOOLEAN = "BOOLEAN"
        OCTET_STRING = "OCTET STRING"
        NUMERIC_STRING = "NumericString"
        DATE_AND_TIME = "DateAndTime"
        IP_ADDRESS = "IPAddress"
        DOUBLE_DOT = ".."

        /* Numbers */
        INT = "regexp:[0-9]+"

        /* */
        CRLF="regexp:\R"
        WHITE_SPACE="regexp:[\n\t\f]"
  ]

  generateTokenAccessors=true
}

asnFile ::= !<<eof>> program
program ::= element *
private element ::= { pin=2 recoverWhile=property_recover }
private property_recover ::= !(
BEGIN | IMPLICIT | TAGGED | TAGS | CLASS | EXPORTS | IMPORTS | ENUMERATED | SEQUENCE | CHOICE | UNIQUE | DEFINITIONS |
OID | DATA | SIZE | FROM | END | SEQUENCE_OF | WITH_SYNTAX |

LPAREN | RPAREN | LBRACE | RBRACE | LBRACKET | RBRACKET |

LET | COMMA | SEMICOLON | COLON | DOT |

COMMENT |

UTC_TIME | UTF8STRING | INTEGER | NULL | OPTIONAL | BOOLEAN | OCTET_STRING | NUMERIC_STRING | DATE_AND_TIME | IP_ADDRESS | DOUBLE_DOT

INT)




